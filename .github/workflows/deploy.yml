# name: Terraform CI CD pipeline for deploying AWS services
# run-name: ${{github.actor}} has trigger the pipeline

# on:
#   push:
#     branches: ["dev"]

# env:
#   AWS_ACCESS_KEY: ${{secrets.AWS_ACCESS_KEY}}
#   AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}

# jobs:
#   build-infra:
#     name: terraform-ci-cd
#     runs-on: ubuntu-latest
#     steps:
#       - name: checkout
#         uses: actions/checkout@v2
#       - name: set up Terraform
#         uses: hashicorp/setup-terraform@v2
#       - name: Terraform Init
#         id: init
#         run: terraform init
#         working-directory: ./main-code
#       - name: Terraform Validate
#         id: validate
#         run: terraform validate
#         working-directory: ./main-code
#       - name: Terraform Plan
#         id: plan
#         run: terraform plan
#         working-directory: ./main-code
#       - name: Terraform Apply
#         id: apply
#         run: terraform apply
#         working-directory: ./main-code

# name: Terraform CI/CD

# on:
#   push:
#     branches:
#       - dev
#   pull_request:
#     branches:
#       - dev

# env:
#   AWS_ACCESS_KEY: ${{secrets.AWS_ACCESS_KEY}}
#   AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}

# jobs:
#   terraform_apply:
#     name: Apply Terraform
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v1
#         with:
#           terraform_version: ">=1.0.0"

#       - name: Terraform Init
#         run: terraform init
#         working-directory: ./main-code

#       - name: Terraform Validate
#         run: terraform validate
#         working-directory: ./main-code

#       - name: Terraform Plan
#         run: terraform plan
#         working-directory: ./main-code

#       - name: Terraform Apply
#         run: terraform apply -auto-approve
#         working-directory: ./main-code

#   terraform_destroy:
#     name: Destroy Terraform
#     runs-on: ubuntu-latest
#     if: github.event_name == 'push' && contains(github.event.head_commit.message, 'destroy')
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v1
#         with:
#           terraform_version: ">=1.0.0"

#       - name: Terraform Init
#         run: terraform init
#         working-directory: ./main-code

#       - name: Terraform Destroy
#         run: terraform destroy -auto-approve
#         working-directory: ./main-code

name: Terraform CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform_apply:
    name: Apply Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./main-code

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./main-code

      - name: Terraform Plan
        run: terraform plan
        working-directory: ./main-code

      - name: Terraform Apply
        id: terraform_apply
        working-directory: ./main-code
        run: |
          terraform apply -auto-approve
          echo "##[set-output name=status]success"

      - name: Save apply status
        if: always()
        run: echo "TF_APPLY_STATUS=${{ job.steps.terraform_apply.outputs.status }}" >> $GITHUB_ENV

  terraform_destroy:
    name: Destroy Terraform
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.event.head_commit.message, 'destroy')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./main-code

      - name: Terraform Destroy
        id: terraform_destroy
        run: |
          terraform destroy -auto-approve
          echo "##[set-output name=status]success"

      - name: Save destroy status
        if: always()
        run: echo "TF_DESTROY_STATUS=${{ job.steps.terraform_destroy.outputs.status }}" >> $GITHUB_ENV
